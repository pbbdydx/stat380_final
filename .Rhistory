```
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
map2 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
!(choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
.na(m1_stats))
does not have any NA values, if so, figure out why
sum(is.na(m1_stats))
sum(is.na(m2_stats))
sum(is.na(map_stats))
```
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
map2 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
!(choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
((map2 == choice) & (winning_map_vote > losing_map_vote)) ~ 'Voted',
!(choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
((map2 == choice) & (winning_map_vote > losing_map_vote)) ~ 'Voted',
!(map2 == choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
map2 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
!(map2 == choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
map_stats <- rbind(m1_stats, m2_stats)
# make sure map_stats does not have any NA values, if so, figure out why
sum(is.na(m1_stats))
sum(is.na(m2_stats))
sum(is.na(map_stats))
map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
)
map_probs <- map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
)
map_probs
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar()
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, stat = 'identity',fill = method)) +
geom_bar()
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity')
View(m2_stats)
View(map_data)
View(map_vote_data)
map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2)
View(map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2))
View(map_vote_data %>%
subset(!is.na(map2)) %>%
group_by(map2))
View(map_vote_data)
map_vote_data[489,]$choice <- map_vote_datap[489,]$map1
map_vote_data[489,]$choice <- map_vote_data[489,]$map1
# we filter here to show the few cases where this happens. in the next code chunk,
# we clean the data to a consistent format.
map_vote_data %>%
filter(
is.na(map1) & !is.na(map2) | is.na(map2) & !is.na(map1)
)
map_vote_data <- map_vote_data %>%
mutate(
# since we only have a few specific cases, we can 'hard-code' them into
# the data wrangling
map1 = if_else(map2 != choice, choice, map1),
map2 = if_else(map1 != choice, choice, map2),
choice = if_else(map2 == choice & is.na(map1), NA, choice)
)
# start creating the dataframes that are used for this question
m1_stats <- map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1) %>%
reframe(
win = map1 == choice,
# there are 3 cases for the method: either a map lost, won by votes, or got forced to win because it was map1
method = case_when(
map1 != choice ~ 'Did Not Win',
map1 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
map1 != choice & winning_map_vote == losing_map_vote ~ 'Forced'
)
) %>%
rename(
map = map1
)
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
map2 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
!(map2 == choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
map_stats <- rbind(m1_stats, m2_stats)
# make sure map_stats does not have any NA values, if so, figure out why
sum(is.na(m1_stats))
sum(is.na(m2_stats))
sum(is.na(map_stats))
# clear env, load libraries and data
rm(list = ls())
library(tidyverse)
library(readr)
cod_p1 <- read_csv('CODGames_p1_380.csv')
cod_p2 <- read_csv('CODGames_p2_380.csv')
gm_data <- read_csv('CODGameModes.csv')
map_data  <- read.csv('CODMaps.csv')
# we combine the results of player 1 and player 2 according to the instructions
# so first add a column to indicate which player it is in case it is used for the future problems
cod_p1$player = 1
cod_p2$player = 2
full_data <- rbind(cod_p1, cod_p2)
# lowercase column names.
# AI disclosure: We asked chatgpt 4o to modify the column names with regex
names(full_data) <- tolower(gsub("([a-z])([A-Z])", "\\1_\\2", names(full_data)))
# get a list of the clean names
clean_maps <- as.vector(unique(map_data$Name))
clean_data <- full_data %>%
mutate(
map1 = case_when(
map1 %in% clean_maps ~ map1,
map1 %in% c('Collateral', 'Collateral Streik', 'Collaterol Strike') ~ 'Collateral Strike',
map1 == 'Deprogam' ~ 'Deprogram',
map1 == 'Miami Stirke' ~ 'Miami Strike',
map1 == 'Ruah' ~ 'Rush',
map1 == 'Riad' ~ 'Raid',
map1 == 'Drive-in' ~ 'Drive-In'
),
map2 = case_when(
map2 %in% clean_maps ~ map2,
map2 %in% c('Miami Stirke', 'Miami Sstrike') ~ 'Miami Strike',
map2 == 'yamantau' ~ 'Yamantau',
map2 == 'Collateral' ~ 'Collateral Strike',
map2 == 'Amrada Strike' ~ 'Armada Strike',
map2 == 'Drive-in' ~ 'Drive-In'
),
choice = case_when(
choice %in% clean_maps ~ choice,
choice %in% c("APocalypse","Apocolypse") ~ 'Apocalypse',
choice %in% c('Collateral', 'Collaterel Strike') ~ 'Collateral Strike',
choice == 'Deisel' ~ 'Diesel',
choice == 'Drive-in' ~ 'Drive-In',
choice == 'Riad' ~ 'Raid'
),
# notice there are 'X o Y' values for the map vote so use gsub to swap them
map_vote = gsub(' o ', ' to ', map_vote),
# clean the game type variable since it will be used in task 3
game_type = case_when(
game_type == 'HC - TDM' ~ 'TDM',
game_type == 'HC - Kill Confirmed' ~ 'Kill Confirmed',
game_type == 'HC - Hardpoint' ~ 'Hardpoint',
game_type == 'HC - Domination' ~ 'Domination'
)
) %>%
# separate map vote column. The larget number is always written first
separate(map_vote, into = c('winning_map_vote', 'losing_map_vote'), sep = ' to ', extra = 'merge', convert = TRUE)
# make sure the name of every map is cleaned for all 3 map columns. (set diff is NA only for missing maps)
setdiff(clean_data$map1, map_data$Name)
setdiff(clean_data$map2, map_data$Name)
setdiff(clean_data$choice, map_data$Name)
map_vote_data <- clean_data %>%
select(map1, map2, winning_map_vote, losing_map_vote, choice)
map_vote_data[489,]$choice <- map_vote_data[489,]$map1
# we filter here to show the few cases where this happens. in the next code chunk,
# we clean the data to a consistent format.
map_vote_data %>%
filter(
is.na(map1) & !is.na(map2) | is.na(map2) & !is.na(map1)
)
map_vote_data <- map_vote_data %>%
mutate(
# since we only have a few specific cases, we can 'hard-code' them into
# the data wrangling
map1 = if_else(map2 != choice, choice, map1),
map2 = if_else(map1 != choice, choice, map2),
choice = if_else(map2 == choice & is.na(map1), NA, choice)
)
# start creating the dataframes that are used for this question
m1_stats <- map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1) %>%
reframe(
win = map1 == choice,
# there are 3 cases for the method: either a map lost, won by votes, or got forced to win because it was map1
method = case_when(
map1 != choice ~ 'Did Not Win',
map1 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
map1 != choice & winning_map_vote == losing_map_vote ~ 'Forced'
)
) %>%
rename(
map = map1
)
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
map2 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
!(map2 == choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
map_stats <- rbind(m1_stats, m2_stats)
# make sure map_stats does not have any NA values, if so, figure out why
sum(is.na(m1_stats))
sum(is.na(m2_stats))
sum(is.na(map_stats))
View(m1_stats)
View( map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1)))
View( map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1))
sum(is.na( map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1)))
map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1) %>%
reframe(
win = (map1 == choice),
# there are 3 cases for the method: either a map lost, won by votes, or got forced to win because it was map1
method = case_when(
map1 != choice ~ 'Did Not Win',
map1 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
map1 != choice & winning_map_vote == losing_map_vote ~ 'Forced'
)
View(map_vote_data %>%
View(map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1) %>%
reframe(
win = (map1 == choice),
# there are 3 cases for the method: either a map lost, won by votes, or got forced to win because it was map1
method = case_when(
map1 != choice ~ 'Did Not Win',
map1 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
map1 != choice & winning_map_vote == losing_map_vote ~ 'Forced'
)))
# start creating the dataframes that are used for this question
m1_stats <- map_vote_data %>%
select(-map2) %>%
subset(!is.na(map1)) %>%
group_by(map1) %>%
reframe(
win = (map1 == choice),
# there are 3 cases for the method: either a map lost, won by votes, or got forced to win because it was map1
method = case_when(
map1 != choice ~ 'Did Not Win',
map1 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
map1 == choice & winning_map_vote == losing_map_vote ~ 'Forced'
)
) %>%
rename(
map = map1
)
# make sure map_stats does not have any NA values, if so, figure out why
sum(is.na(m1_stats))
ve any NA values, if so, figure out why
sum(is.na(m2_stats))
sum(is.na(map_stats))
sum(is.na(m1_stats))
sum(is.na(m2_stats))
sum(is.na(map_stats))
m2_stats <- map_vote_data %>%
select(-map1) %>%
subset(!is.na(map2)) %>%
group_by(map2) %>%
reframe(
win = map2 == choice,
# there are 2 cases for map2: either it lost or it won by votes. it is never forced to be the map.
method = case_when(
map2 == choice & winning_map_vote > losing_map_vote ~ 'Voted',
!(map2 == choice & winning_map_vote > losing_map_vote) ~ 'Did Not Win' # if it was not voted, then it did not win
)
) %>%
rename(
map = map2
)
map_stats <- rbind(m1_stats, m2_stats)
why
sum(is.na(m1_stats))
sum(is.na(m2_stats))
sum(is.na(map_stats))
map_probs <- map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
)
map_probs
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity')
map_probs <- map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
) %>%
group_by(map) %>%
arrange(sum(total_prob), desc = T)
map_probs
map_probs <- map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
) %>%
arrange(sum(total_prob), desc = T)
map_probs
map_probs <- map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
)
map_probs
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity')
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity') +
labs(
x = 'Map',
y = 'Total Probability',
title = 'Total Probability Of A Map To Be Played When It Appears For The Map Vote'
)
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity') +
labs(
x = 'Map',
y = 'Total Probability',
title = 'Total Probability Of A Map To Be Chosen When It Appears For The Map Vote'
)
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity') +
labs(
x = 'Map',
y = 'Total Probability',
title = 'Total Probability of a Map To Be Chosen When it Appears For the Map Vote'
)
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity') +
labs(
x = 'Map',
y = 'Total Probability',
title = 'Total Probability of a Map To Be Chosen When it Appears For the Map Vote'
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
map_probs <- map_stats %>%
group_by(map) %>%
mutate(
times_chosen = n(),
prob_win = win/times_chosen
) %>%
ungroup() %>%
group_by(map, method) %>%
summarize(
total_prob = sum(prob_win)
) %>%
group_by(map) %>%
mutate(
total_sum = sum(total_prob)
) %>%
ungroup() %>%
mutate(map = reorder(map, total_sum))
map_probs
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity') +
labs(
x = 'Map',
y = 'Total Probability',
title = 'Total Probability of a Map To Be Chosen When it Appears For the Map Vote'
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# making the plot
ggplot(map_probs, aes(x = map, y = total_prob, fill = method)) +
geom_bar(stat = 'identity') +
labs(
x = 'Map',
y = 'Total Probability',
fill = 'Method of Win',
title = 'Total Probability of a Map To Be Chosen When it Appears For the Map Vote'
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
